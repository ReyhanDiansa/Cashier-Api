// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  sku         String
  description String?
  image       String
  price       Decimal
  stock       Int
  colorId     Int?
  sizeId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  color Color? @relation(fields: [colorId], references: [id])
  size  Size?  @relation(fields: [sizeId], references: [id])

  OrderDetail Order_Detail[]
}

model Color {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String
  role      Role     @default(helper)
  password  String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  helper
  admin
}

model Order {
  id        Int            @id @default(autoincrement())
  orderId   String         @unique
  name      String
  phone     String?
  address   String?
  email     String
  status    Order_Status   @default(pending)
  total     Decimal
  userId    Int
  expiredAt DateTime
  details   Order_Detail[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Order_Detail {
  id        Int    @id @default(autoincrement())
  orderId   String
  productId Int
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [orderId])
  product Product @relation(fields: [productId], references: [id])
}

enum Order_Status {
  pending
  cancel
  done
}
